generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articleIncomes   ArticleIncome[]
  articleOutgoings ArticleOutgoing[]
  articleOrders    ArticleOrder[]

  @@map("articles")
}

model Incoming {
  id        Int      @id @default(autoincrement())
  isSold    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articleIncomes ArticleIncome[]
  outgoings      Outgoing[]

  @@map("incomings")
}

model ArticleIncome {
  sellPrice  Int
  primePrice Int
  count      Int
  createdAt  DateTime @default(now())

  article    Article  @relation(fields: [articleId], references: [id])
  articleId  Int
  incoming   Incoming @relation(fields: [incomingId], references: [id])
  incomingId Int

  @@unique([articleId, incomingId])
  @@map("article_incomes")
}

model Order {
  id          Int      @id @default(autoincrement())
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customerId    Int
  customer      Customer       @relation(fields: [customerId], references: [id])
  outgoings     Outgoing[]
  articleOrders ArticleOrder[]

  @@map("orders")
}

model ArticleOrder {
  sellPrice  Int
  primePrice Int
  count      Int
  createdAt  DateTime @default(now())

  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int

  @@unique([articleId, orderId])
  @@map("article_orders")
}

model Outgoing {
  id        Int          @id @default(autoincrement())
  type      OutgoingType @default(INCOME)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  incomingId Int?
  incoming   Incoming? @relation(fields: [incomingId], references: [id], onDelete: Cascade)
  order      Order?    @relation(fields: [orderId], references: [id])
  orderId    Int?

  articleOutgoings  ArticleOutgoing[]
  otherOutgoings    OtherOutgoing[]
  deliveryOutgoings DeliveryOutgoing[]

  @@map("outgoings")
}

model ArticleOutgoing {
  sum         Int
  count       Int
  description String?
  createdAt   DateTime @default(now())

  article    Article   @relation(fields: [articleId], references: [id])
  articleId  Int
  outgoing   Outgoing  @relation(fields: [outgoingId], references: [id])
  outgoingId Int
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?

  @@unique([articleId, outgoingId])
  @@map("article_outgoings")
}

model OtherOutgoing {
  sum         Int
  description String
  createdAt   DateTime @default(now())

  outgoing   Outgoing @relation(fields: [outgoingId], references: [id])
  outgoingId Int

  @@unique([outgoingId])
  @@map("other_outgoings")
}

model DeliveryOutgoing {
  sum         Int
  description String?
  createdAt   DateTime @default(now())

  outgoing      Outgoing    @relation(fields: [outgoingId], references: [id])
  outgoingId    Int
  deliveryman   Deliveryman @relation(fields: [deliverymanId], references: [id])
  deliverymanId Int

  @@unique([outgoingId, deliverymanId])
  @@map("delivery_outgoings")
}

model City {
  id          Int           @id @default(autoincrement())
  name        String
  countryId   Int
  country     Country       @relation(fields: [countryId], references: [id])
  customers   Customer[]
  deliverymen Deliveryman[]

  @@map("cities")
}

model Country {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]

  @@map("countries")
}

model Customer {
  id               Int               @id @default(autoincrement())
  name             String
  phoneNumber      String?
  desciption       String?
  cityId           Int
  city             City              @relation(fields: [cityId], references: [id])
  articleOutgoings ArticleOutgoing[]
  orders           Order[]

  @@map("customers")
}

model Deliveryman {
  id                Int                @id @default(autoincrement())
  name              String
  phoneNumber       String
  desciption        String?
  cityId            Int
  city              City               @relation(fields: [cityId], references: [id])
  deliveryOutgoings DeliveryOutgoing[]

  @@map("deliverymen")
}

enum OutgoingType {
  INCOME
  ORDER
  DELIVERY
  OTHER
}
